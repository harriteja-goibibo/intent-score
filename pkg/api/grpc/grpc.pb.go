// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/proto/grpc/grpc.proto

package grpc

import (
	context "context"
	fmt "fmt"
	health "github.com/goibibo/intent-score/pkg/api/grpc/health"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("api/proto/grpc/grpc.proto", fileDescriptor_7de298a7613ba4c1) }

var fileDescriptor_7de298a7613ba4c1 = []byte{
	// 168 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4c, 0x2c, 0xc8, 0xd4,
	0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x4f, 0x2f, 0x2a, 0x48, 0x06, 0x13, 0x7a, 0x60, 0xbe, 0x10,
	0x0b, 0x88, 0x2d, 0xa5, 0x84, 0xa6, 0x20, 0x23, 0x35, 0x31, 0xa7, 0x24, 0x03, 0x4a, 0x41, 0x54,
	0x1a, 0xb9, 0x71, 0xf1, 0x64, 0xe6, 0x95, 0xa4, 0xe6, 0x95, 0xc4, 0x17, 0x27, 0xe7, 0x17, 0xa5,
	0x0a, 0x99, 0x71, 0x71, 0x04, 0x64, 0xe6, 0xa5, 0x07, 0xe4, 0xe7, 0xa5, 0x0b, 0x09, 0xeb, 0x41,
	0x95, 0x7a, 0x80, 0x29, 0xe7, 0x8c, 0xd4, 0xe4, 0x6c, 0x29, 0x6c, 0x82, 0x4a, 0x0c, 0x4e, 0x76,
	0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x8c, 0xc7, 0x72,
	0x0c, 0x51, 0x3a, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0xe9, 0xf9,
	0x99, 0x49, 0x99, 0x49, 0xf9, 0xfa, 0x10, 0xab, 0x74, 0xc1, 0x56, 0xe9, 0x17, 0x64, 0xa7, 0xeb,
	0x83, 0x5c, 0x08, 0x72, 0x5b, 0x12, 0x1b, 0xd8, 0x39, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xed, 0x4f, 0x7d, 0xee, 0xd5, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IntentScoreClient is the client API for IntentScore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IntentScoreClient interface {
	PingPong(ctx context.Context, in *health.HealthCheck, opts ...grpc.CallOption) (*health.HealthCheck, error)
}

type intentScoreClient struct {
	cc *grpc.ClientConn
}

func NewIntentScoreClient(cc *grpc.ClientConn) IntentScoreClient {
	return &intentScoreClient{cc}
}

func (c *intentScoreClient) PingPong(ctx context.Context, in *health.HealthCheck, opts ...grpc.CallOption) (*health.HealthCheck, error) {
	out := new(health.HealthCheck)
	err := c.cc.Invoke(ctx, "/grpc.intent_score/PingPong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntentScoreServer is the server API for IntentScore service.
type IntentScoreServer interface {
	PingPong(context.Context, *health.HealthCheck) (*health.HealthCheck, error)
}

// UnimplementedIntentScoreServer can be embedded to have forward compatible implementations.
type UnimplementedIntentScoreServer struct {
}

func (*UnimplementedIntentScoreServer) PingPong(ctx context.Context, req *health.HealthCheck) (*health.HealthCheck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingPong not implemented")
}

func RegisterIntentScoreServer(s *grpc.Server, srv IntentScoreServer) {
	s.RegisterService(&_IntentScore_serviceDesc, srv)
}

func _IntentScore_PingPong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(health.HealthCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntentScoreServer).PingPong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.intent_score/PingPong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntentScoreServer).PingPong(ctx, req.(*health.HealthCheck))
	}
	return interceptor(ctx, in, info, handler)
}

var _IntentScore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.intent_score",
	HandlerType: (*IntentScoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingPong",
			Handler:    _IntentScore_PingPong_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/grpc/grpc.proto",
}
